(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[680],{4112:function(e,t,r){"use strict";r.r(t),r.d(t,{frontMatter:function(){return i},contentTitle:function(){return a},metadata:function(){return c},toc:function(){return p},default:function(){return u}});var o=r(2122),n=r(9756),l=(r(7294),r(3905)),s=["components"],i={sidebar_position:1,sidebar_label:"Basic Workflow",title:"Basic Workflow"},a=void 0,c={unversionedId:"workflows/basic_workflow",id:"workflows/basic_workflow",isDocsHomePage:!1,title:"Basic Workflow",description:"Staring Cornell in record mode:",source:"@site/docs/workflows/basic_workflow.md",sourceDirName:"workflows",slug:"/workflows/basic_workflow",permalink:"/cornell4test/docs/workflows/basic_workflow",version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,sidebar_label:"Basic Workflow",title:"Basic Workflow"},sidebar:"defaultSidebar",previous:{title:"System In Action",permalink:"/cornell4test/docs/examples"},next:{title:"Adding Custom Matchers",permalink:"/cornell4test/docs/workflows/custom_matchers"}},p=[],d={toc:p};function u(e){var t=e.components,r=(0,n.Z)(e,s);return(0,l.kt)("wrapper",(0,o.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"Staring Cornell in record mode:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"cornell -ff https://api.github.com/ --record -cd cassettes\n")),(0,l.kt)("p",null,"This will start the server in record-proxy mode on port ",(0,l.kt)("inlineCode",{parentName:"p"},"9000"),", and will forward all requests to ",(0,l.kt)("inlineCode",{parentName:"p"},"https://api.github.com/")),(0,l.kt)("p",null,(0,l.kt)("img",{parentName:"p",src:"https://imgur.com/tTm39E1.gif",alt:"System in test"})),(0,l.kt)("p",null,"When cornell is in record mode, it will forward all request to the specified forwarding url, for example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'requests.get("http://127.0.0.1:9000/github/repos/kevin1024/vcrpy/license").json()\n')),(0,l.kt)("p",null,"or"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'requests.get("http://127.0.0.1:9000/github/repos/kevin1024/vcrpy/license").json()\n')),(0,l.kt)("p",null,"or you can browse to the url using your browser"),(0,l.kt)("p",null,(0,l.kt)("img",{parentName:"p",src:"https://imgur.com/w1lyIK7.gif",alt:"Browser"})),(0,l.kt)("p",null,"Cornell will forward the request to the specified url and will record both the request and the response."),(0,l.kt)("p",null,"The yaml cassettes will be recorded in dedicated dictory (",(0,l.kt)("inlineCode",{parentName:"p"},"cassettes")," in the root dir, by default)"),(0,l.kt)("p",null,"For example:"),(0,l.kt)("p",null,(0,l.kt)("img",{parentName:"p",src:"https://imgur.com/cZExEpu.gif",alt:"Cassette dir"})),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Note")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"By default, `cassettes` directory will be created in cornell's root dir and will contain the cassette by destination hierarchy.\nUse `-cd` to specify custom directory for your cassettes.\nMind that `-cd <custom_dir> should match for both record and replay modes\n")),(0,l.kt)("p",null,"Once all the necessary interactions were recorded, stop cornell server using ",(0,l.kt)("em",{parentName:"p"},"ctrl+c"),".\nOnce stopped, all interactions will be mapped via an auto-generated ",(0,l.kt)("inlineCode",{parentName:"p"},"index.yaml")," file."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Note")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"In case the `index.yaml` was already present, it will be updated with new interactions, otherwise new file will be created.\n")),(0,l.kt)("p",null,"In this specific example, we can see that the 2 requests are mapped to the saved cassettes:"),(0,l.kt)("p",null,(0,l.kt)("img",{parentName:"p",src:"https://imgur.com/IYjiJx6.gif",alt:"Index file"})))}u.isMDXComponent=!0}}]);