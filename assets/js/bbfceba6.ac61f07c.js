(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[268],{1130:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return a},contentTitle:function(){return s},metadata:function(){return d},toc:function(){return u},default:function(){return m}});var o=n(2122),l=n(9756),r=(n(7294),n(3905)),i=["components"],a={sidebar_position:3,sidebar_label:"Starting Cornell from your own module",title:"Starting Cornell from your own module"},s=void 0,d={unversionedId:"workflows/own_module",id:"workflows/own_module",isDocsHomePage:!1,title:"Starting Cornell from your own module",description:"In order to extend Cornell with additional matchers, or register to its hooks,",source:"@site/docs/workflows/own_module.md",sourceDirName:"workflows",slug:"/workflows/own_module",permalink:"/cornell4test/docs/workflows/own_module",version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,sidebar_label:"Starting Cornell from your own module",title:"Starting Cornell from your own module"},sidebar:"defaultSidebar",previous:{title:"Adding Custom Matchers",permalink:"/cornell4test/docs/workflows/custom_matchers"}},u=[],c={toc:u};function m(e){var t=e.components,n=(0,l.Z)(e,i);return(0,r.kt)("wrapper",(0,o.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"In order to extend Cornell with additional matchers, or register to its hooks,\nyou first will need to start the cornell service from your own internal module.\nThis can be easily done by inheriting ",(0,r.kt)("inlineCode",{parentName:"p"},"CornellCmdOptions")," ",(0,r.kt)("a",{parentName:"p",href:"https://click.palletsprojects.com/en/8.0.x/"},"click")," from ",(0,r.kt)("inlineCode",{parentName:"p"},"cornell.cornell_server")),(0,r.kt)("p",null," For example:\nIn a separate module (i.e. ",(0,r.kt)("inlineCode",{parentName:"p"},"cornell_wrapper.py"),"), create the following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'#!/usr/bin/env python\n\nimport click\nfrom pathlib import Path\nfrom cornell.cornell_server import CornellCmdOptions, start_cornell\n\n@click.command(cls=CornellCmdOptions)\n@click.option(\'--hello\', default=False, is_flag=True, help="Say hello")\ndef start_mock_service(hello, **kwargs):\n    cassettes_dir = Path(__file__).absolute().parent/"mock_service"\n    if hello:\n        print("Hello from Cornell :)")\n        return\n    start_cornell(cassettes_dir=cassettes_dir, **kwargs)\n\n\nif __name__ == "__main__":\n    start_mock_service()\n')),(0,r.kt)("p",null,"In this example, we modified the following:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Set a default ",(0,r.kt)("inlineCode",{parentName:"li"},"cassettes_dir"),", so when the wrapper is executed it will be used instead of a default one"),(0,r.kt)("li",{parentName:"ul"},"Added another command argument, to extend possible functionality")),(0,r.kt)("p",null,"Running:"),(0,r.kt)("p",null," ",(0,r.kt)("inlineCode",{parentName:"p"}," ./tasks_worker/tests/cornell_wrapper.py --hello")),(0,r.kt)("p",null," will result in:"),(0,r.kt)("p",null," ",(0,r.kt)("inlineCode",{parentName:"p"},"Hello from Cornell :)")),(0,r.kt)("p",null,"Running the same command without arguments, will start Cornell, with with a default cassettes_dir."))}m.isMDXComponent=!0}}]);