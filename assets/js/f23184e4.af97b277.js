(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[249],{9475:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return d},default:function(){return m}});var o=n(2122),r=n(9756),s=(n(7294),n(3905)),a=["components"],i={sidebar_position:2,sidebar_label:"Adding Custom Matchers",title:"Adding Custom Matchers"},l=void 0,c={unversionedId:"workflows/custom_matchers",id:"workflows/custom_matchers",isDocsHomePage:!1,title:"Adding Custom Matchers",description:"In some cases you'd want to add custom request macthers to Cornell.",source:"@site/docs/workflows/custom_matchers.md",sourceDirName:"workflows",slug:"/workflows/custom_matchers",permalink:"/cornell4test/docs/workflows/custom_matchers",version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,sidebar_label:"Adding Custom Matchers",title:"Adding Custom Matchers"},sidebar:"defaultSidebar",previous:{title:"Basic Workflow",permalink:"/cornell4test/docs/workflows/basic_workflow"},next:{title:"Starting Cornell from your own module",permalink:"/cornell4test/docs/workflows/own_module"}},d=[{value:"Subscribing to Hooks",id:"subscribing-to-hooks",children:[]}],u={toc:d};function m(e){var t=e.components,n=(0,r.Z)(e,a);return(0,s.kt)("wrapper",(0,o.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"In some cases you'd want to add ",(0,s.kt)("a",{parentName:"p",href:"https://vcrpy.readthedocs.io/en/latest/advanced.html#register-your-own-request-matcher"},"custom request macthers")," to Cornell.\nThis can be easily done using the wrapper we created in the above example, with the ",(0,s.kt)("inlineCode",{parentName:"p"},"additional_vcr_matchers")," param:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'#!/usr/bin/env python\n\nimport click\nimport json\nfrom vcr.util import read_body\nfrom cornell.cornell_server import CornellCmdOptions, start_cornell\nfrom cornell.cornell_helpers import json_in_headers\nfrom cornell.custom_matchers import requests_match_conditions\n\n\n# Custom Matcher\n@requests_match_conditions(json_in_headers, lambda request: request.body)\ndef vcr_json_custom_body_matcher(received_request, cassette_request):\n    received_request_dict = json.loads(read_body(received_request))\n    cassette_request_dict = json.loads(read_body(cassette_request))\n    if received_request_dict == cassette_request_dict or "special_params" not in received_request_dict:\n        return True\n    return is_specially_matched(received_request_dict, cassette_request_dict)\n\n\n@click.command(cls=CornellCmdOptions)\ndef start_mock_service(**kwargs):\n    start_cornell(additional_vcr_matchers=[vcr_json_custom_body_matcher], **kwargs)\n\n\nif __name__ == "__main__":\n    start_mock_service()\n')),(0,s.kt)("p",null,"In this example, we've added ",(0,s.kt)("inlineCode",{parentName:"p"},"vcr_json_custom_body_matcher")," as an ",(0,s.kt)("inlineCode",{parentName:"p"},"additional_vcr_matchers"),".\nNotice that Cornell also provides the ",(0,s.kt)("inlineCode",{parentName:"p"},"requests_match_conditions")," decorator, in case you'd want to activate your matcher only under specific circumstances."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Note"),": If you're adding a custom matcher that actually implements standard protocols that can be widely used, kindly consider adding it as PR to Cornell.\nYour contribution will be really appreciated! "),(0,s.kt)("h3",{id:"subscribing-to-hooks"},"Subscribing to Hooks"),(0,s.kt)("p",null,"During runtime, Cornell triggers ",(0,s.kt)("a",{parentName:"p",href:"https://pythonhosted.org/blinker/"},"blinker signals")," that\nwill allow you to modify or extend some of the out-of-the-box functionality, at this point,\nthe following is available:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Replacing default logging service"),(0,s.kt)("li",{parentName:"ul"},"Modifying the listed cassette path (for example, if you prefer not to save your cassettes locally)")),(0,s.kt)("p",null,"List of signal can be found in ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/hiredscorelabs/cornell4test/blob/master/cornell/signals.py"},"cornell/signals.py")),(0,s.kt)("p",null,"Example:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'from cornell.signals import logging_setup, process_cassette_file\n\n@logging_setup.connect\ndef setup_logging_service(_):\n    return logging_service\n\n\n@process_cassette_file.connect\ndef download_cassette_file(cassette_file_path):\n    storage = CornellCassettesStorage(logging_service)\n    return storage.download(cassette_file_path)\n\n\n@click.command(cls=CornellCmdOptions)\ndef start_mock_service(**kwargs):\n    start_cornell(**kwargs)\n\n\nif __name__ == "__main__":\n    start_mock_service()\n\n')),(0,s.kt)("p",null,"In the above example, we're replacing the default logging service with our own and in addition, every time Cornell requires a cassette file in runtime, we're downloading it from our dedicated storage."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Note"),": Additional signals can be easily added, please feel free to open a PR or an Issue!"))}m.isMDXComponent=!0}}]);